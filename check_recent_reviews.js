const mysql = require('mysql2/promise');
require('dotenv').config({ path: './dev.env' });

async function checkRecentReviews() {
  let connection;
  
  try {
    connection = await mysql.createConnection({
      host: process.env.MYSQL_HOST,
      port: process.env.MYSQL_PORT || 3306,
      user: process.env.MYSQL_USERNAME,
      password: process.env.MYSQL_PASSWORD,
      database: process.env.MYSQL_DATABASE,
      ssl: {
        rejectUnauthorized: false
      }
    });

    console.log('üîç ÏµúÍ∑º Î¶¨Î∑∞ ÌôïÏù∏ Ï§ë...\n');
    
    // ÏµúÍ∑º 10Í∞ú Î¶¨Î∑∞ ÌôïÏù∏ (ÏãúÍ∞Ñ ÏàúÏÑúÎåÄÎ°ú)
    const [reviews] = await connection.execute(`
      SELECT 
        p.id,
        p.cname,
        p.review,
        p.reviewRegisteredAt,
        p.uid,
        u.outerId,
        comp.manager,
        comp.name as companyName
      FROM Propositions p
      LEFT JOIN Users u ON p.uid = u.uid
      LEFT JOIN Campaigns c ON p.campaignId = c.id
      LEFT JOIN Companies comp ON c.companyId = comp.id
      WHERE p.review IS NOT NULL 
        AND p.review != ''
        AND p.reviewRegisteredAt IS NOT NULL
      ORDER BY p.reviewRegisteredAt DESC
      LIMIT 10
    `);

    console.log(`üìä ÏµúÍ∑º 10Í∞ú Î¶¨Î∑∞:`);
    reviews.forEach((review, index) => {
      const kstTime = new Date(review.reviewRegisteredAt);
      console.log(`\n${index + 1}. ID: ${review.id}`);
      console.log(`   Ï∫†ÌéòÏù∏: ${review.cname}`);
      console.log(`   ÌöåÏÇ¨: ${review.companyName || 'N/A'}`);
      console.log(`   Îß§ÎãàÏ†Ä: ${review.manager || 'N/A'}`);
      console.log(`   Î∏îÎ°úÍ±∞: ${review.outerId || 'N/A'}`);
      console.log(`   Îì±Î°ùÏãúÍ∞Ñ: ${kstTime.toLocaleString('ko-KR')}`);
      console.log(`   URL: ${review.review}`);
    });

    // Ïò§Îäò Îì±Î°ùÎêú Î¶¨Î∑∞ ÌôïÏù∏
    const [todayReviews] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM Propositions p
      WHERE p.review IS NOT NULL 
        AND p.review != ''
        AND p.reviewRegisteredAt >= DATE(DATE_ADD(NOW(), INTERVAL 9 HOUR))
    `);

    console.log(`\nüìÖ Ïò§Îäò Îì±Î°ùÎêú Î¶¨Î∑∞: ${todayReviews[0].count}Í∞ú`);

    // ÏµúÍ∑º 2ÏãúÍ∞Ñ ÎÇ¥ Î¶¨Î∑∞ ÌôïÏù∏
    const [recentReviews] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM Propositions p
      WHERE p.review IS NOT NULL 
        AND p.review != ''
        AND p.reviewRegisteredAt > DATE_SUB(DATE_ADD(NOW(), INTERVAL 9 HOUR), INTERVAL 2 HOUR)
        AND p.reviewRegisteredAt <= DATE_ADD(NOW(), INTERVAL 9 HOUR)
    `);

    console.log(`‚è∞ ÏµúÍ∑º 2ÏãúÍ∞Ñ ÎÇ¥ Î¶¨Î∑∞: ${recentReviews[0].count}Í∞ú`);

    // Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Î¶¨Î∑∞ ID ÌôïÏù∏
    const [unprocessedReviews] = await connection.execute(`
      SELECT 
        p.id,
        p.cname,
        p.reviewRegisteredAt
      FROM Propositions p
      WHERE p.review IS NOT NULL 
        AND p.review != ''
        AND p.reviewRegisteredAt > DATE_SUB(DATE_ADD(NOW(), INTERVAL 9 HOUR), INTERVAL 2 HOUR)
        AND p.reviewRegisteredAt <= DATE_ADD(NOW(), INTERVAL 9 HOUR)
      ORDER BY p.reviewRegisteredAt DESC
    `);

    if (unprocessedReviews.length > 0) {
      console.log(`\nüÜï ÏµúÍ∑º 2ÏãúÍ∞Ñ ÎÇ¥ Î¶¨Î∑∞ ID Î™©Î°ù:`);
      unprocessedReviews.forEach(review => {
        const kstTime = new Date(review.reviewRegisteredAt);
        console.log(`   ID: ${review.id} - ${review.cname} (${kstTime.toLocaleString('ko-KR')})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

checkRecentReviews();