const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config({ path: './dev.env' });

// ÏïåÎ¶º Î∞úÏÜ° Ïù¥Î†•ÏùÑ Ï†ÄÏû•Ìï† ÌååÏùº
const NOTIFICATION_LOG_FILE = path.join(__dirname, 'notification_log.json');

// Slack Webhook Ï†ÑÏÜ° Ìï®Ïàò
async function sendSlackNotification(webhookUrl, violations) {
  const blocks = [
    {
      type: "header",
      text: {
        type: "plain_text",
        text: "üö® Íµ¨Îß§ÎßÅÌÅ¨ ÎàÑÎùΩ ÏïåÎ¶º",
        emoji: true
      }
    },
    {
      type: "section",
      text: {
        type: "mrkdwn",
        text: `*${violations.length}Í∞úÏùò Íµ¨Îß§ÎßÅÌÅ¨ ÎàÑÎùΩ*Ïù¥ Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.`
      }
    },
    {
      type: "divider"
    }
  ];

  // Í∞Å ÎàÑÎùΩ Í±¥Ïóê ÎåÄÌïú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
  violations.forEach((violation, index) => {
    blocks.push({
      type: "section",
      fields: [
        {
          type: "mrkdwn",
          text: `*Proposition ID:*\n${violation.id}`
        },
        {
          type: "mrkdwn",
          text: `*Ï∫†ÌéòÏù∏Î™Ö:*\n${violation.cname}`
        },
        {
          type: "mrkdwn",
          text: `*Campaign ID:*\n${violation.campaignId}`
        },
        {
          type: "mrkdwn",
          text: `*Channel Íµ¨Îß§ÎßÅÌÅ¨:*\n${violation.channelPurchaseLink}`
        }
      ]
    });
    
    if (index < violations.length - 1) {
      blocks.push({ type: "divider" });
    }
  });

  blocks.push({
    type: "context",
    elements: [
      {
        type: "mrkdwn",
        text: `Í≤ÄÏÇ¨ ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}`
      }
    ]
  });

  try {
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ blocks })
    });

    if (!response.ok) {
      throw new Error(`Slack API responded with ${response.status}`);
    }

    console.log('‚úÖ Slack ÏïåÎ¶º Ï†ÑÏÜ° ÏÑ±Í≥µ');
  } catch (error) {
    console.error('‚ùå Slack ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®:', error.message);
  }
}

// ÏïåÎ¶º Î∞úÏÜ° Ïù¥Î†• Î°úÎìú
async function loadNotificationLog() {
  try {
    const data = await fs.readFile(NOTIFICATION_LOG_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    // ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ Îπà Í∞ùÏ≤¥ Î∞òÌôò
    return {};
  }
}

// ÏïåÎ¶º Î∞úÏÜ° Ïù¥Î†• Ï†ÄÏû•
async function saveNotificationLog(log) {
  await fs.writeFile(NOTIFICATION_LOG_FILE, JSON.stringify(log, null, 2));
}

// Íµ¨Îß§ÎßÅÌÅ¨ ÎàÑÎùΩ Í≤ÄÏ¶ù Î∞è Î™®ÎãàÌÑ∞ÎßÅ
async function monitorPurchaseLinks() {
  let connection;
  
  try {
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
    connection = await mysql.createConnection({
      host: process.env.MYSQL_HOST,
      port: process.env.MYSQL_PORT || 3306,
      user: process.env.MYSQL_USERNAME,
      password: process.env.MYSQL_PASSWORD,
      database: process.env.MYSQL_DATABASE
    });

    console.log('üîç Íµ¨Îß§ÎßÅÌÅ¨ ÎàÑÎùΩ Í≤ÄÏ¶ù ÏãúÏûë...');

    // ÎàÑÎùΩÎêú purchaseLink Ï°∞Ìöå (ÏµúÍ∑º 2Í∞úÏõî, responsedAtÏù¥ ÏûàÎäî Í≤ΩÏö∞Îßå)
    const [violations] = await connection.execute(`
      SELECT 
        p.id,
        p.cname,
        p.campaignId,
        cc.purchaseLink as channelPurchaseLink,
        p.purchaseLink as propositionPurchaseLink,
        p.createdAt,
        p.updatedAt,
        p.responsedAt
      FROM Propositions p
      INNER JOIN ChannelCampaigns cc ON p.campaignId = cc.campaignId
      WHERE cc.purchaseLink IS NOT NULL 
        AND cc.purchaseLink != ''
        AND (p.purchaseLink IS NULL OR p.purchaseLink = '')
        AND p.responsedAt IS NOT NULL
        AND p.createdAt >= DATE_SUB(NOW(), INTERVAL 2 MONTH)
      ORDER BY p.id DESC
    `);

    if (violations.length === 0) {
      console.log('‚úÖ Íµ¨Îß§ÎßÅÌÅ¨ ÎàÑÎùΩ ÏóÜÏùå');
      return;
    }

    console.log(`‚ö†Ô∏è  ${violations.length}Í∞úÏùò Íµ¨Îß§ÎßÅÌÅ¨ ÎàÑÎùΩ Î∞úÍ≤¨`);

    // ÏïåÎ¶º Î∞úÏÜ° Ïù¥Î†• Î°úÎìú
    const notificationLog = await loadNotificationLog();
    const newViolations = [];

    // ÏÉàÎ°úÏö¥ ÎàÑÎùΩ Í±¥Îßå ÌïÑÌÑ∞ÎßÅ
    for (const violation of violations) {
      const key = `${violation.id}_${violation.campaignId}`;
      if (!notificationLog[key]) {
        newViolations.push(violation);
        notificationLog[key] = {
          notifiedAt: new Date().toISOString(),
          propositionId: violation.id,
          campaignId: violation.campaignId,
          cname: violation.cname
        };
      }
    }

    if (newViolations.length > 0) {
      console.log(`üì® ${newViolations.length}Í∞úÏùò ÏÉàÎ°úÏö¥ ÎàÑÎùΩ Í±¥ Î∞úÍ≤¨`);
      
      // Slack Webhook URL ÌôïÏù∏
      const webhookUrl = process.env.SLACK_WEBHOOK_URL;
      
      if (webhookUrl) {
        // ÏÉàÎ°úÏö¥ ÎàÑÎùΩ Í±¥Ïóê ÎåÄÌï¥ÏÑúÎßå ÏïåÎ¶º Ï†ÑÏÜ°
        await sendSlackNotification(webhookUrl, newViolations);
        
        // ÏïåÎ¶º Î∞úÏÜ° Ïù¥Î†• Ï†ÄÏû•
        await saveNotificationLog(notificationLog);
      } else {
        console.log('‚ö†Ô∏è  SLACK_WEBHOOK_URL ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        console.log('ÏÉàÎ°úÏö¥ ÎàÑÎùΩ Í±¥:', newViolations);
      }
    } else {
      console.log('‚ÑπÔ∏è  Î™®Îì† ÎàÑÎùΩ Í±¥ÏùÄ Ïù¥ÎØ∏ ÏïåÎ¶ºÏù¥ Î∞úÏÜ°ÎêòÏóàÏäµÎãàÎã§.');
    }

    // Ï†ÑÏ≤¥ ÎàÑÎùΩ ÌòÑÌô© ÏöîÏïΩ
    console.log('\nüìä Ï†ÑÏ≤¥ ÎàÑÎùΩ ÌòÑÌô©:');
    const summary = {};
    violations.forEach(v => {
      if (!summary[v.campaignId]) {
        summary[v.campaignId] = {
          cname: v.cname,
          count: 0,
          channelPurchaseLink: v.channelPurchaseLink
        };
      }
      summary[v.campaignId].count++;
    });

    Object.entries(summary).forEach(([campaignId, info]) => {
      console.log(`  Campaign ${campaignId} (${info.cname}): ${info.count}Í±¥`);
      console.log(`  Channel Link: ${info.channelPurchaseLink}`);
    });

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  monitorPurchaseLinks();
}

module.exports = { monitorPurchaseLinks };